// Code generated by thriftgo (0.2.7). DO NOT EDIT.

package mq

import (
	"context"
	"github.com/apache/thrift/lib/go/thrift"
)

type MqService interface {
}

type MqServiceClient struct {
	c thrift.TClient
}

func NewMqServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MqServiceClient {
	return &MqServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMqServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MqServiceClient {
	return &MqServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMqServiceClient(c thrift.TClient) *MqServiceClient {
	return &MqServiceClient{
		c: c,
	}
}

func (p *MqServiceClient) Client_() thrift.TClient {
	return p.c
}

type MqServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MqService
}

func (p *MqServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MqServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MqServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMqServiceProcessor(handler MqService) *MqServiceProcessor {
	self := &MqServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	return self
}
func (p *MqServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}
