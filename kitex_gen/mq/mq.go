// Code generated by thriftgo (0.2.7). DO NOT EDIT.

package mq

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type SubConfig struct {
	ServiceName string `thrift:"service_name,1" frugal:"1,default,string" json:"service_name"`
	ServicePath string `thrift:"service_path,2" frugal:"2,default,string" json:"service_path"`
}

func NewSubConfig() *SubConfig {
	return &SubConfig{}
}

func (p *SubConfig) InitDefault() {
	*p = SubConfig{}
}

func (p *SubConfig) GetServiceName() (v string) {
	return p.ServiceName
}

func (p *SubConfig) GetServicePath() (v string) {
	return p.ServicePath
}
func (p *SubConfig) SetServiceName(val string) {
	p.ServiceName = val
}
func (p *SubConfig) SetServicePath(val string) {
	p.ServicePath = val
}

var fieldIDToName_SubConfig = map[int16]string{
	1: "service_name",
	2: "service_path",
}

func (p *SubConfig) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubConfig) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *SubConfig) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ServicePath = v
	}
	return nil
}

func (p *SubConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("service_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ServiceName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("service_path", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ServicePath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SubConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubConfig(%+v)", *p)
}

func (p *SubConfig) DeepEqual(ano *SubConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ServiceName) {
		return false
	}
	if !p.Field2DeepEqual(ano.ServicePath) {
		return false
	}
	return true
}

func (p *SubConfig) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ServiceName, src) != 0 {
		return false
	}
	return true
}
func (p *SubConfig) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ServicePath, src) != 0 {
		return false
	}
	return true
}

type Channel struct {
	Name      string     `thrift:"name,1" frugal:"1,default,string" json:"name"`
	SubConfig *SubConfig `thrift:"sub_config,2" frugal:"2,default,SubConfig" json:"sub_config"`
}

func NewChannel() *Channel {
	return &Channel{}
}

func (p *Channel) InitDefault() {
	*p = Channel{}
}

func (p *Channel) GetName() (v string) {
	return p.Name
}

var Channel_SubConfig_DEFAULT *SubConfig

func (p *Channel) GetSubConfig() (v *SubConfig) {
	if !p.IsSetSubConfig() {
		return Channel_SubConfig_DEFAULT
	}
	return p.SubConfig
}
func (p *Channel) SetName(val string) {
	p.Name = val
}
func (p *Channel) SetSubConfig(val *SubConfig) {
	p.SubConfig = val
}

var fieldIDToName_Channel = map[int16]string{
	1: "name",
	2: "sub_config",
}

func (p *Channel) IsSetSubConfig() bool {
	return p.SubConfig != nil
}

func (p *Channel) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Channel[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Channel) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *Channel) ReadField2(iprot thrift.TProtocol) error {
	p.SubConfig = NewSubConfig()
	if err := p.SubConfig.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Channel) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Channel"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Channel) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Channel) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sub_config", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SubConfig.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Channel) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Channel(%+v)", *p)
}

func (p *Channel) DeepEqual(ano *Channel) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.SubConfig) {
		return false
	}
	return true
}

func (p *Channel) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Channel) Field2DeepEqual(src *SubConfig) bool {

	if !p.SubConfig.DeepEqual(src) {
		return false
	}
	return true
}

type AddChannelReq struct {
	TopicName string   `thrift:"topic_name,1" frugal:"1,default,string" json:"topic_name"`
	Channel   *Channel `thrift:"channel,2" frugal:"2,default,Channel" json:"channel"`
}

func NewAddChannelReq() *AddChannelReq {
	return &AddChannelReq{}
}

func (p *AddChannelReq) InitDefault() {
	*p = AddChannelReq{}
}

func (p *AddChannelReq) GetTopicName() (v string) {
	return p.TopicName
}

var AddChannelReq_Channel_DEFAULT *Channel

func (p *AddChannelReq) GetChannel() (v *Channel) {
	if !p.IsSetChannel() {
		return AddChannelReq_Channel_DEFAULT
	}
	return p.Channel
}
func (p *AddChannelReq) SetTopicName(val string) {
	p.TopicName = val
}
func (p *AddChannelReq) SetChannel(val *Channel) {
	p.Channel = val
}

var fieldIDToName_AddChannelReq = map[int16]string{
	1: "topic_name",
	2: "channel",
}

func (p *AddChannelReq) IsSetChannel() bool {
	return p.Channel != nil
}

func (p *AddChannelReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddChannelReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AddChannelReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TopicName = v
	}
	return nil
}

func (p *AddChannelReq) ReadField2(iprot thrift.TProtocol) error {
	p.Channel = NewChannel()
	if err := p.Channel.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AddChannelReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddChannelReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddChannelReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("topic_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TopicName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddChannelReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("channel", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Channel.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AddChannelReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddChannelReq(%+v)", *p)
}

func (p *AddChannelReq) DeepEqual(ano *AddChannelReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TopicName) {
		return false
	}
	if !p.Field2DeepEqual(ano.Channel) {
		return false
	}
	return true
}

func (p *AddChannelReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TopicName, src) != 0 {
		return false
	}
	return true
}
func (p *AddChannelReq) Field2DeepEqual(src *Channel) bool {

	if !p.Channel.DeepEqual(src) {
		return false
	}
	return true
}

type AddChannelResp struct {
	Channel *Channel `thrift:"channel,1" frugal:"1,default,Channel" json:"channel"`
}

func NewAddChannelResp() *AddChannelResp {
	return &AddChannelResp{}
}

func (p *AddChannelResp) InitDefault() {
	*p = AddChannelResp{}
}

var AddChannelResp_Channel_DEFAULT *Channel

func (p *AddChannelResp) GetChannel() (v *Channel) {
	if !p.IsSetChannel() {
		return AddChannelResp_Channel_DEFAULT
	}
	return p.Channel
}
func (p *AddChannelResp) SetChannel(val *Channel) {
	p.Channel = val
}

var fieldIDToName_AddChannelResp = map[int16]string{
	1: "channel",
}

func (p *AddChannelResp) IsSetChannel() bool {
	return p.Channel != nil
}

func (p *AddChannelResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddChannelResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AddChannelResp) ReadField1(iprot thrift.TProtocol) error {
	p.Channel = NewChannel()
	if err := p.Channel.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AddChannelResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddChannelResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddChannelResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("channel", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Channel.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddChannelResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddChannelResp(%+v)", *p)
}

func (p *AddChannelResp) DeepEqual(ano *AddChannelResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Channel) {
		return false
	}
	return true
}

func (p *AddChannelResp) Field1DeepEqual(src *Channel) bool {

	if !p.Channel.DeepEqual(src) {
		return false
	}
	return true
}

type MqService interface {
	AddChannel(ctx context.Context, req *AddChannelReq) (r *AddChannelResp, err error)
}

type MqServiceClient struct {
	c thrift.TClient
}

func NewMqServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MqServiceClient {
	return &MqServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMqServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MqServiceClient {
	return &MqServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMqServiceClient(c thrift.TClient) *MqServiceClient {
	return &MqServiceClient{
		c: c,
	}
}

func (p *MqServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *MqServiceClient) AddChannel(ctx context.Context, req *AddChannelReq) (r *AddChannelResp, err error) {
	var _args MqServiceAddChannelArgs
	_args.Req = req
	var _result MqServiceAddChannelResult
	if err = p.Client_().Call(ctx, "AddChannel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MqServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MqService
}

func (p *MqServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MqServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MqServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMqServiceProcessor(handler MqService) *MqServiceProcessor {
	self := &MqServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("AddChannel", &mqServiceProcessorAddChannel{handler: handler})
	return self
}
func (p *MqServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type mqServiceProcessorAddChannel struct {
	handler MqService
}

func (p *mqServiceProcessorAddChannel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MqServiceAddChannelArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddChannel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MqServiceAddChannelResult{}
	var retval *AddChannelResp
	if retval, err2 = p.handler.AddChannel(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddChannel: "+err2.Error())
		oprot.WriteMessageBegin("AddChannel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddChannel", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MqServiceAddChannelArgs struct {
	Req *AddChannelReq `thrift:"req,1" frugal:"1,default,AddChannelReq" json:"req"`
}

func NewMqServiceAddChannelArgs() *MqServiceAddChannelArgs {
	return &MqServiceAddChannelArgs{}
}

func (p *MqServiceAddChannelArgs) InitDefault() {
	*p = MqServiceAddChannelArgs{}
}

var MqServiceAddChannelArgs_Req_DEFAULT *AddChannelReq

func (p *MqServiceAddChannelArgs) GetReq() (v *AddChannelReq) {
	if !p.IsSetReq() {
		return MqServiceAddChannelArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MqServiceAddChannelArgs) SetReq(val *AddChannelReq) {
	p.Req = val
}

var fieldIDToName_MqServiceAddChannelArgs = map[int16]string{
	1: "req",
}

func (p *MqServiceAddChannelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MqServiceAddChannelArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MqServiceAddChannelArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MqServiceAddChannelArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAddChannelReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MqServiceAddChannelArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddChannel_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MqServiceAddChannelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MqServiceAddChannelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MqServiceAddChannelArgs(%+v)", *p)
}

func (p *MqServiceAddChannelArgs) DeepEqual(ano *MqServiceAddChannelArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MqServiceAddChannelArgs) Field1DeepEqual(src *AddChannelReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MqServiceAddChannelResult struct {
	Success *AddChannelResp `thrift:"success,0,optional" frugal:"0,optional,AddChannelResp" json:"success,omitempty"`
}

func NewMqServiceAddChannelResult() *MqServiceAddChannelResult {
	return &MqServiceAddChannelResult{}
}

func (p *MqServiceAddChannelResult) InitDefault() {
	*p = MqServiceAddChannelResult{}
}

var MqServiceAddChannelResult_Success_DEFAULT *AddChannelResp

func (p *MqServiceAddChannelResult) GetSuccess() (v *AddChannelResp) {
	if !p.IsSetSuccess() {
		return MqServiceAddChannelResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MqServiceAddChannelResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddChannelResp)
}

var fieldIDToName_MqServiceAddChannelResult = map[int16]string{
	0: "success",
}

func (p *MqServiceAddChannelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MqServiceAddChannelResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MqServiceAddChannelResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MqServiceAddChannelResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAddChannelResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MqServiceAddChannelResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddChannel_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MqServiceAddChannelResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MqServiceAddChannelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MqServiceAddChannelResult(%+v)", *p)
}

func (p *MqServiceAddChannelResult) DeepEqual(ano *MqServiceAddChannelResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MqServiceAddChannelResult) Field0DeepEqual(src *AddChannelResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
