// Code generated by thriftgo (0.2.7). DO NOT EDIT.

package oss

import (
	"bytes"
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type OssPlatformType int64

const (
	OssPlatformType_UNKNOWN OssPlatformType = 0
	OssPlatformType_MINIO   OssPlatformType = 1
	OssPlatformType_ALI_YUN OssPlatformType = 2
)

func (p OssPlatformType) String() string {
	switch p {
	case OssPlatformType_UNKNOWN:
		return "UNKNOWN"
	case OssPlatformType_MINIO:
		return "MINIO"
	case OssPlatformType_ALI_YUN:
		return "ALI_YUN"
	}
	return "<UNSET>"
}

func OssPlatformTypeFromString(s string) (OssPlatformType, error) {
	switch s {
	case "UNKNOWN":
		return OssPlatformType_UNKNOWN, nil
	case "MINIO":
		return OssPlatformType_MINIO, nil
	case "ALI_YUN":
		return OssPlatformType_ALI_YUN, nil
	}
	return OssPlatformType(0), fmt.Errorf("not a valid OssPlatformType string")
}

func OssPlatformTypePtr(v OssPlatformType) *OssPlatformType { return &v }
func (p *OssPlatformType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = OssPlatformType(result.Int64)
	return
}

func (p *OssPlatformType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type PreSignedPutObjectUrlReq struct {
	BucketName string          `thrift:"bucket_name,1" frugal:"1,default,string" json:"bucket_name"`
	ObjectName string          `thrift:"object_name,2" frugal:"2,default,string" json:"object_name"`
	Expiry     int32           `thrift:"expiry,3" frugal:"3,default,i32" json:"expiry"`
	Type       OssPlatformType `thrift:"type,4" frugal:"4,default,OssPlatformType" json:"type"`
}

func NewPreSignedPutObjectUrlReq() *PreSignedPutObjectUrlReq {
	return &PreSignedPutObjectUrlReq{}
}

func (p *PreSignedPutObjectUrlReq) InitDefault() {
	*p = PreSignedPutObjectUrlReq{}
}

func (p *PreSignedPutObjectUrlReq) GetBucketName() (v string) {
	return p.BucketName
}

func (p *PreSignedPutObjectUrlReq) GetObjectName() (v string) {
	return p.ObjectName
}

func (p *PreSignedPutObjectUrlReq) GetExpiry() (v int32) {
	return p.Expiry
}

func (p *PreSignedPutObjectUrlReq) GetType() (v OssPlatformType) {
	return p.Type
}
func (p *PreSignedPutObjectUrlReq) SetBucketName(val string) {
	p.BucketName = val
}
func (p *PreSignedPutObjectUrlReq) SetObjectName(val string) {
	p.ObjectName = val
}
func (p *PreSignedPutObjectUrlReq) SetExpiry(val int32) {
	p.Expiry = val
}
func (p *PreSignedPutObjectUrlReq) SetType(val OssPlatformType) {
	p.Type = val
}

var fieldIDToName_PreSignedPutObjectUrlReq = map[int16]string{
	1: "bucket_name",
	2: "object_name",
	3: "expiry",
	4: "type",
}

func (p *PreSignedPutObjectUrlReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PreSignedPutObjectUrlReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PreSignedPutObjectUrlReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BucketName = v
	}
	return nil
}

func (p *PreSignedPutObjectUrlReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ObjectName = v
	}
	return nil
}

func (p *PreSignedPutObjectUrlReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Expiry = v
	}
	return nil
}

func (p *PreSignedPutObjectUrlReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Type = OssPlatformType(v)
	}
	return nil
}

func (p *PreSignedPutObjectUrlReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PreSignedPutObjectUrlReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PreSignedPutObjectUrlReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bucket_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BucketName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PreSignedPutObjectUrlReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("object_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ObjectName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PreSignedPutObjectUrlReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("expiry", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Expiry); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PreSignedPutObjectUrlReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PreSignedPutObjectUrlReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PreSignedPutObjectUrlReq(%+v)", *p)
}

func (p *PreSignedPutObjectUrlReq) DeepEqual(ano *PreSignedPutObjectUrlReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BucketName) {
		return false
	}
	if !p.Field2DeepEqual(ano.ObjectName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Expiry) {
		return false
	}
	if !p.Field4DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *PreSignedPutObjectUrlReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.BucketName, src) != 0 {
		return false
	}
	return true
}
func (p *PreSignedPutObjectUrlReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ObjectName, src) != 0 {
		return false
	}
	return true
}
func (p *PreSignedPutObjectUrlReq) Field3DeepEqual(src int32) bool {

	if p.Expiry != src {
		return false
	}
	return true
}
func (p *PreSignedPutObjectUrlReq) Field4DeepEqual(src OssPlatformType) bool {

	if p.Type != src {
		return false
	}
	return true
}

type PreSignedPutObjectUrlResp struct {
	PreSignedUrl string `thrift:"pre_signed_url,1" frugal:"1,default,string" json:"pre_signed_url"`
}

func NewPreSignedPutObjectUrlResp() *PreSignedPutObjectUrlResp {
	return &PreSignedPutObjectUrlResp{}
}

func (p *PreSignedPutObjectUrlResp) InitDefault() {
	*p = PreSignedPutObjectUrlResp{}
}

func (p *PreSignedPutObjectUrlResp) GetPreSignedUrl() (v string) {
	return p.PreSignedUrl
}
func (p *PreSignedPutObjectUrlResp) SetPreSignedUrl(val string) {
	p.PreSignedUrl = val
}

var fieldIDToName_PreSignedPutObjectUrlResp = map[int16]string{
	1: "pre_signed_url",
}

func (p *PreSignedPutObjectUrlResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PreSignedPutObjectUrlResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PreSignedPutObjectUrlResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PreSignedUrl = v
	}
	return nil
}

func (p *PreSignedPutObjectUrlResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PreSignedPutObjectUrlResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PreSignedPutObjectUrlResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pre_signed_url", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PreSignedUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PreSignedPutObjectUrlResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PreSignedPutObjectUrlResp(%+v)", *p)
}

func (p *PreSignedPutObjectUrlResp) DeepEqual(ano *PreSignedPutObjectUrlResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PreSignedUrl) {
		return false
	}
	return true
}

func (p *PreSignedPutObjectUrlResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.PreSignedUrl, src) != 0 {
		return false
	}
	return true
}

type PutObjectReq struct {
	BucketName string          `thrift:"bucket_name,1" frugal:"1,default,string" json:"bucket_name"`
	ObjectName string          `thrift:"object_name,2" frugal:"2,default,string" json:"object_name"`
	File       []byte          `thrift:"file,3" frugal:"3,default,binary" json:"file"`
	Type       OssPlatformType `thrift:"type,4" frugal:"4,default,OssPlatformType" json:"type"`
}

func NewPutObjectReq() *PutObjectReq {
	return &PutObjectReq{}
}

func (p *PutObjectReq) InitDefault() {
	*p = PutObjectReq{}
}

func (p *PutObjectReq) GetBucketName() (v string) {
	return p.BucketName
}

func (p *PutObjectReq) GetObjectName() (v string) {
	return p.ObjectName
}

func (p *PutObjectReq) GetFile() (v []byte) {
	return p.File
}

func (p *PutObjectReq) GetType() (v OssPlatformType) {
	return p.Type
}
func (p *PutObjectReq) SetBucketName(val string) {
	p.BucketName = val
}
func (p *PutObjectReq) SetObjectName(val string) {
	p.ObjectName = val
}
func (p *PutObjectReq) SetFile(val []byte) {
	p.File = val
}
func (p *PutObjectReq) SetType(val OssPlatformType) {
	p.Type = val
}

var fieldIDToName_PutObjectReq = map[int16]string{
	1: "bucket_name",
	2: "object_name",
	3: "file",
	4: "type",
}

func (p *PutObjectReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PutObjectReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PutObjectReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BucketName = v
	}
	return nil
}

func (p *PutObjectReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ObjectName = v
	}
	return nil
}

func (p *PutObjectReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.File = []byte(v)
	}
	return nil
}

func (p *PutObjectReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Type = OssPlatformType(v)
	}
	return nil
}

func (p *PutObjectReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PutObjectReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PutObjectReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bucket_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BucketName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PutObjectReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("object_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ObjectName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PutObjectReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("file", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.File)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PutObjectReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PutObjectReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutObjectReq(%+v)", *p)
}

func (p *PutObjectReq) DeepEqual(ano *PutObjectReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BucketName) {
		return false
	}
	if !p.Field2DeepEqual(ano.ObjectName) {
		return false
	}
	if !p.Field3DeepEqual(ano.File) {
		return false
	}
	if !p.Field4DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *PutObjectReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.BucketName, src) != 0 {
		return false
	}
	return true
}
func (p *PutObjectReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ObjectName, src) != 0 {
		return false
	}
	return true
}
func (p *PutObjectReq) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.File, src) != 0 {
		return false
	}
	return true
}
func (p *PutObjectReq) Field4DeepEqual(src OssPlatformType) bool {

	if p.Type != src {
		return false
	}
	return true
}

type PutObjectResp struct {
	Url string `thrift:"url,1" frugal:"1,default,string" json:"url"`
}

func NewPutObjectResp() *PutObjectResp {
	return &PutObjectResp{}
}

func (p *PutObjectResp) InitDefault() {
	*p = PutObjectResp{}
}

func (p *PutObjectResp) GetUrl() (v string) {
	return p.Url
}
func (p *PutObjectResp) SetUrl(val string) {
	p.Url = val
}

var fieldIDToName_PutObjectResp = map[int16]string{
	1: "url",
}

func (p *PutObjectResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PutObjectResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PutObjectResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Url = v
	}
	return nil
}

func (p *PutObjectResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PutObjectResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PutObjectResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PutObjectResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutObjectResp(%+v)", *p)
}

func (p *PutObjectResp) DeepEqual(ano *PutObjectResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Url) {
		return false
	}
	return true
}

func (p *PutObjectResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}

type OssService interface {
	PreSignedPutObjectUrl(ctx context.Context, req *PreSignedPutObjectUrlReq) (r *PreSignedPutObjectUrlResp, err error)

	PutObject(ctx context.Context, req *PutObjectReq) (r *PutObjectResp, err error)
}

type OssServiceClient struct {
	c thrift.TClient
}

func NewOssServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *OssServiceClient {
	return &OssServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewOssServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *OssServiceClient {
	return &OssServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewOssServiceClient(c thrift.TClient) *OssServiceClient {
	return &OssServiceClient{
		c: c,
	}
}

func (p *OssServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *OssServiceClient) PreSignedPutObjectUrl(ctx context.Context, req *PreSignedPutObjectUrlReq) (r *PreSignedPutObjectUrlResp, err error) {
	var _args OssServicePreSignedPutObjectUrlArgs
	_args.Req = req
	var _result OssServicePreSignedPutObjectUrlResult
	if err = p.Client_().Call(ctx, "PreSignedPutObjectUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *OssServiceClient) PutObject(ctx context.Context, req *PutObjectReq) (r *PutObjectResp, err error) {
	var _args OssServicePutObjectArgs
	_args.Req = req
	var _result OssServicePutObjectResult
	if err = p.Client_().Call(ctx, "PutObject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type OssServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      OssService
}

func (p *OssServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *OssServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *OssServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewOssServiceProcessor(handler OssService) *OssServiceProcessor {
	self := &OssServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("PreSignedPutObjectUrl", &ossServiceProcessorPreSignedPutObjectUrl{handler: handler})
	self.AddToProcessorMap("PutObject", &ossServiceProcessorPutObject{handler: handler})
	return self
}
func (p *OssServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type ossServiceProcessorPreSignedPutObjectUrl struct {
	handler OssService
}

func (p *ossServiceProcessorPreSignedPutObjectUrl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OssServicePreSignedPutObjectUrlArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PreSignedPutObjectUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := OssServicePreSignedPutObjectUrlResult{}
	var retval *PreSignedPutObjectUrlResp
	if retval, err2 = p.handler.PreSignedPutObjectUrl(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PreSignedPutObjectUrl: "+err2.Error())
		oprot.WriteMessageBegin("PreSignedPutObjectUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PreSignedPutObjectUrl", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ossServiceProcessorPutObject struct {
	handler OssService
}

func (p *ossServiceProcessorPutObject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OssServicePutObjectArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PutObject", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := OssServicePutObjectResult{}
	var retval *PutObjectResp
	if retval, err2 = p.handler.PutObject(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PutObject: "+err2.Error())
		oprot.WriteMessageBegin("PutObject", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PutObject", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type OssServicePreSignedPutObjectUrlArgs struct {
	Req *PreSignedPutObjectUrlReq `thrift:"req,1" frugal:"1,default,PreSignedPutObjectUrlReq" json:"req"`
}

func NewOssServicePreSignedPutObjectUrlArgs() *OssServicePreSignedPutObjectUrlArgs {
	return &OssServicePreSignedPutObjectUrlArgs{}
}

func (p *OssServicePreSignedPutObjectUrlArgs) InitDefault() {
	*p = OssServicePreSignedPutObjectUrlArgs{}
}

var OssServicePreSignedPutObjectUrlArgs_Req_DEFAULT *PreSignedPutObjectUrlReq

func (p *OssServicePreSignedPutObjectUrlArgs) GetReq() (v *PreSignedPutObjectUrlReq) {
	if !p.IsSetReq() {
		return OssServicePreSignedPutObjectUrlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OssServicePreSignedPutObjectUrlArgs) SetReq(val *PreSignedPutObjectUrlReq) {
	p.Req = val
}

var fieldIDToName_OssServicePreSignedPutObjectUrlArgs = map[int16]string{
	1: "req",
}

func (p *OssServicePreSignedPutObjectUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OssServicePreSignedPutObjectUrlArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OssServicePreSignedPutObjectUrlArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OssServicePreSignedPutObjectUrlArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPreSignedPutObjectUrlReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *OssServicePreSignedPutObjectUrlArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PreSignedPutObjectUrl_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OssServicePreSignedPutObjectUrlArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OssServicePreSignedPutObjectUrlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OssServicePreSignedPutObjectUrlArgs(%+v)", *p)
}

func (p *OssServicePreSignedPutObjectUrlArgs) DeepEqual(ano *OssServicePreSignedPutObjectUrlArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *OssServicePreSignedPutObjectUrlArgs) Field1DeepEqual(src *PreSignedPutObjectUrlReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type OssServicePreSignedPutObjectUrlResult struct {
	Success *PreSignedPutObjectUrlResp `thrift:"success,0,optional" frugal:"0,optional,PreSignedPutObjectUrlResp" json:"success,omitempty"`
}

func NewOssServicePreSignedPutObjectUrlResult() *OssServicePreSignedPutObjectUrlResult {
	return &OssServicePreSignedPutObjectUrlResult{}
}

func (p *OssServicePreSignedPutObjectUrlResult) InitDefault() {
	*p = OssServicePreSignedPutObjectUrlResult{}
}

var OssServicePreSignedPutObjectUrlResult_Success_DEFAULT *PreSignedPutObjectUrlResp

func (p *OssServicePreSignedPutObjectUrlResult) GetSuccess() (v *PreSignedPutObjectUrlResp) {
	if !p.IsSetSuccess() {
		return OssServicePreSignedPutObjectUrlResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OssServicePreSignedPutObjectUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*PreSignedPutObjectUrlResp)
}

var fieldIDToName_OssServicePreSignedPutObjectUrlResult = map[int16]string{
	0: "success",
}

func (p *OssServicePreSignedPutObjectUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OssServicePreSignedPutObjectUrlResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OssServicePreSignedPutObjectUrlResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OssServicePreSignedPutObjectUrlResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPreSignedPutObjectUrlResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *OssServicePreSignedPutObjectUrlResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PreSignedPutObjectUrl_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OssServicePreSignedPutObjectUrlResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *OssServicePreSignedPutObjectUrlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OssServicePreSignedPutObjectUrlResult(%+v)", *p)
}

func (p *OssServicePreSignedPutObjectUrlResult) DeepEqual(ano *OssServicePreSignedPutObjectUrlResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *OssServicePreSignedPutObjectUrlResult) Field0DeepEqual(src *PreSignedPutObjectUrlResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type OssServicePutObjectArgs struct {
	Req *PutObjectReq `thrift:"req,1" frugal:"1,default,PutObjectReq" json:"req"`
}

func NewOssServicePutObjectArgs() *OssServicePutObjectArgs {
	return &OssServicePutObjectArgs{}
}

func (p *OssServicePutObjectArgs) InitDefault() {
	*p = OssServicePutObjectArgs{}
}

var OssServicePutObjectArgs_Req_DEFAULT *PutObjectReq

func (p *OssServicePutObjectArgs) GetReq() (v *PutObjectReq) {
	if !p.IsSetReq() {
		return OssServicePutObjectArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OssServicePutObjectArgs) SetReq(val *PutObjectReq) {
	p.Req = val
}

var fieldIDToName_OssServicePutObjectArgs = map[int16]string{
	1: "req",
}

func (p *OssServicePutObjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OssServicePutObjectArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OssServicePutObjectArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OssServicePutObjectArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPutObjectReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *OssServicePutObjectArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PutObject_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OssServicePutObjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OssServicePutObjectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OssServicePutObjectArgs(%+v)", *p)
}

func (p *OssServicePutObjectArgs) DeepEqual(ano *OssServicePutObjectArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *OssServicePutObjectArgs) Field1DeepEqual(src *PutObjectReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type OssServicePutObjectResult struct {
	Success *PutObjectResp `thrift:"success,0,optional" frugal:"0,optional,PutObjectResp" json:"success,omitempty"`
}

func NewOssServicePutObjectResult() *OssServicePutObjectResult {
	return &OssServicePutObjectResult{}
}

func (p *OssServicePutObjectResult) InitDefault() {
	*p = OssServicePutObjectResult{}
}

var OssServicePutObjectResult_Success_DEFAULT *PutObjectResp

func (p *OssServicePutObjectResult) GetSuccess() (v *PutObjectResp) {
	if !p.IsSetSuccess() {
		return OssServicePutObjectResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OssServicePutObjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*PutObjectResp)
}

var fieldIDToName_OssServicePutObjectResult = map[int16]string{
	0: "success",
}

func (p *OssServicePutObjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OssServicePutObjectResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OssServicePutObjectResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OssServicePutObjectResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPutObjectResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *OssServicePutObjectResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PutObject_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OssServicePutObjectResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *OssServicePutObjectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OssServicePutObjectResult(%+v)", *p)
}

func (p *OssServicePutObjectResult) DeepEqual(ano *OssServicePutObjectResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *OssServicePutObjectResult) Field0DeepEqual(src *PutObjectResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
