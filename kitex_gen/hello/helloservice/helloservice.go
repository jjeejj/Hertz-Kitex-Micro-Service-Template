// Code generated by Kitex v0.3.2. DO NOT EDIT.

package helloservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/jjeejj/Hertz-Kitex-Micro-Service-Template/kitex_gen/hello"
)

func serviceInfo() *kitex.ServiceInfo {
	return helloServiceServiceInfo
}

var helloServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "HelloService"
	handlerType := (*hello.HelloService)(nil)
	methods := map[string]kitex.MethodInfo{
		"echo": kitex.NewMethodInfo(echoHandler, newHelloServiceEchoArgs, newHelloServiceEchoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "hello",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func echoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*hello.HelloServiceEchoArgs)
	realResult := result.(*hello.HelloServiceEchoResult)
	success, err := handler.(hello.HelloService).Echo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newHelloServiceEchoArgs() interface{} {
	return hello.NewHelloServiceEchoArgs()
}

func newHelloServiceEchoResult() interface{} {
	return hello.NewHelloServiceEchoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Echo(ctx context.Context, req *hello.PingRequest) (r *hello.PingResponse, err error) {
	var _args hello.HelloServiceEchoArgs
	_args.Req = req
	var _result hello.HelloServiceEchoResult
	if err = p.c.Call(ctx, "echo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
