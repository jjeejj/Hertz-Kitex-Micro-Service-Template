// Code generated by thriftgo (0.2.7). DO NOT EDIT.

package translate

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type TranslatePlatformType int64

const (
	TranslatePlatformType_UNKNOWN TranslatePlatformType = 0
	TranslatePlatformType_ALI_YUN TranslatePlatformType = 1
)

func (p TranslatePlatformType) String() string {
	switch p {
	case TranslatePlatformType_UNKNOWN:
		return "UNKNOWN"
	case TranslatePlatformType_ALI_YUN:
		return "ALI_YUN"
	}
	return "<UNSET>"
}

func TranslatePlatformTypeFromString(s string) (TranslatePlatformType, error) {
	switch s {
	case "UNKNOWN":
		return TranslatePlatformType_UNKNOWN, nil
	case "ALI_YUN":
		return TranslatePlatformType_ALI_YUN, nil
	}
	return TranslatePlatformType(0), fmt.Errorf("not a valid TranslatePlatformType string")
}

func TranslatePlatformTypePtr(v TranslatePlatformType) *TranslatePlatformType { return &v }
func (p *TranslatePlatformType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TranslatePlatformType(result.Int64)
	return
}

func (p *TranslatePlatformType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DetectLanguageReq struct {
	SourceText string                `thrift:"SourceText,1" frugal:"1,default,string" json:"SourceText"`
	Type       TranslatePlatformType `thrift:"type,2" frugal:"2,default,TranslatePlatformType" json:"type"`
}

func NewDetectLanguageReq() *DetectLanguageReq {
	return &DetectLanguageReq{}
}

func (p *DetectLanguageReq) InitDefault() {
	*p = DetectLanguageReq{}
}

func (p *DetectLanguageReq) GetSourceText() (v string) {
	return p.SourceText
}

func (p *DetectLanguageReq) GetType() (v TranslatePlatformType) {
	return p.Type
}
func (p *DetectLanguageReq) SetSourceText(val string) {
	p.SourceText = val
}
func (p *DetectLanguageReq) SetType(val TranslatePlatformType) {
	p.Type = val
}

var fieldIDToName_DetectLanguageReq = map[int16]string{
	1: "SourceText",
	2: "type",
}

func (p *DetectLanguageReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DetectLanguageReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DetectLanguageReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SourceText = v
	}
	return nil
}

func (p *DetectLanguageReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Type = TranslatePlatformType(v)
	}
	return nil
}

func (p *DetectLanguageReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DetectLanguageReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DetectLanguageReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SourceText", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SourceText); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DetectLanguageReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DetectLanguageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DetectLanguageReq(%+v)", *p)
}

func (p *DetectLanguageReq) DeepEqual(ano *DetectLanguageReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SourceText) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *DetectLanguageReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.SourceText, src) != 0 {
		return false
	}
	return true
}
func (p *DetectLanguageReq) Field2DeepEqual(src TranslatePlatformType) bool {

	if p.Type != src {
		return false
	}
	return true
}

type DetectLanguageResp struct {
	DetectedLanguage string `thrift:"DetectedLanguage,1" frugal:"1,default,string" json:"DetectedLanguage"`
}

func NewDetectLanguageResp() *DetectLanguageResp {
	return &DetectLanguageResp{}
}

func (p *DetectLanguageResp) InitDefault() {
	*p = DetectLanguageResp{}
}

func (p *DetectLanguageResp) GetDetectedLanguage() (v string) {
	return p.DetectedLanguage
}
func (p *DetectLanguageResp) SetDetectedLanguage(val string) {
	p.DetectedLanguage = val
}

var fieldIDToName_DetectLanguageResp = map[int16]string{
	1: "DetectedLanguage",
}

func (p *DetectLanguageResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DetectLanguageResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DetectLanguageResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DetectedLanguage = v
	}
	return nil
}

func (p *DetectLanguageResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DetectLanguageResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DetectLanguageResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DetectedLanguage", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DetectedLanguage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DetectLanguageResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DetectLanguageResp(%+v)", *p)
}

func (p *DetectLanguageResp) DeepEqual(ano *DetectLanguageResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DetectedLanguage) {
		return false
	}
	return true
}

func (p *DetectLanguageResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.DetectedLanguage, src) != 0 {
		return false
	}
	return true
}

type TranslateReq struct {
	SourceText     string                `thrift:"SourceText,1" frugal:"1,default,string" json:"SourceText"`
	SourceLanguage string                `thrift:"SourceLanguage,2" frugal:"2,default,string" json:"SourceLanguage"`
	TargetLanguage string                `thrift:"TargetLanguage,3" frugal:"3,default,string" json:"TargetLanguage"`
	Type           TranslatePlatformType `thrift:"type,4" frugal:"4,default,TranslatePlatformType" json:"type"`
}

func NewTranslateReq() *TranslateReq {
	return &TranslateReq{}
}

func (p *TranslateReq) InitDefault() {
	*p = TranslateReq{}
}

func (p *TranslateReq) GetSourceText() (v string) {
	return p.SourceText
}

func (p *TranslateReq) GetSourceLanguage() (v string) {
	return p.SourceLanguage
}

func (p *TranslateReq) GetTargetLanguage() (v string) {
	return p.TargetLanguage
}

func (p *TranslateReq) GetType() (v TranslatePlatformType) {
	return p.Type
}
func (p *TranslateReq) SetSourceText(val string) {
	p.SourceText = val
}
func (p *TranslateReq) SetSourceLanguage(val string) {
	p.SourceLanguage = val
}
func (p *TranslateReq) SetTargetLanguage(val string) {
	p.TargetLanguage = val
}
func (p *TranslateReq) SetType(val TranslatePlatformType) {
	p.Type = val
}

var fieldIDToName_TranslateReq = map[int16]string{
	1: "SourceText",
	2: "SourceLanguage",
	3: "TargetLanguage",
	4: "type",
}

func (p *TranslateReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TranslateReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TranslateReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SourceText = v
	}
	return nil
}

func (p *TranslateReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SourceLanguage = v
	}
	return nil
}

func (p *TranslateReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TargetLanguage = v
	}
	return nil
}

func (p *TranslateReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Type = TranslatePlatformType(v)
	}
	return nil
}

func (p *TranslateReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TranslateReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TranslateReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SourceText", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SourceText); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TranslateReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SourceLanguage", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SourceLanguage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TranslateReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TargetLanguage", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TargetLanguage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TranslateReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TranslateReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TranslateReq(%+v)", *p)
}

func (p *TranslateReq) DeepEqual(ano *TranslateReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SourceText) {
		return false
	}
	if !p.Field2DeepEqual(ano.SourceLanguage) {
		return false
	}
	if !p.Field3DeepEqual(ano.TargetLanguage) {
		return false
	}
	if !p.Field4DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *TranslateReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.SourceText, src) != 0 {
		return false
	}
	return true
}
func (p *TranslateReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SourceLanguage, src) != 0 {
		return false
	}
	return true
}
func (p *TranslateReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.TargetLanguage, src) != 0 {
		return false
	}
	return true
}
func (p *TranslateReq) Field4DeepEqual(src TranslatePlatformType) bool {

	if p.Type != src {
		return false
	}
	return true
}

type TranslateResp struct {
	TranslateResult_ string `thrift:"translateResult,1" frugal:"1,default,string" json:"translateResult"`
}

func NewTranslateResp() *TranslateResp {
	return &TranslateResp{}
}

func (p *TranslateResp) InitDefault() {
	*p = TranslateResp{}
}

func (p *TranslateResp) GetTranslateResult_() (v string) {
	return p.TranslateResult_
}
func (p *TranslateResp) SetTranslateResult_(val string) {
	p.TranslateResult_ = val
}

var fieldIDToName_TranslateResp = map[int16]string{
	1: "translateResult",
}

func (p *TranslateResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TranslateResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TranslateResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TranslateResult_ = v
	}
	return nil
}

func (p *TranslateResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TranslateResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TranslateResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("translateResult", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TranslateResult_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TranslateResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TranslateResp(%+v)", *p)
}

func (p *TranslateResp) DeepEqual(ano *TranslateResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TranslateResult_) {
		return false
	}
	return true
}

func (p *TranslateResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TranslateResult_, src) != 0 {
		return false
	}
	return true
}

type TranslateService interface {
	DetectLanguage(ctx context.Context, req *DetectLanguageReq) (r *DetectLanguageResp, err error)

	Translate(ctx context.Context, req *TranslateReq) (r *TranslateResp, err error)
}

type TranslateServiceClient struct {
	c thrift.TClient
}

func NewTranslateServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TranslateServiceClient {
	return &TranslateServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewTranslateServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TranslateServiceClient {
	return &TranslateServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewTranslateServiceClient(c thrift.TClient) *TranslateServiceClient {
	return &TranslateServiceClient{
		c: c,
	}
}

func (p *TranslateServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *TranslateServiceClient) DetectLanguage(ctx context.Context, req *DetectLanguageReq) (r *DetectLanguageResp, err error) {
	var _args TranslateServiceDetectLanguageArgs
	_args.Req = req
	var _result TranslateServiceDetectLanguageResult
	if err = p.Client_().Call(ctx, "DetectLanguage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TranslateServiceClient) Translate(ctx context.Context, req *TranslateReq) (r *TranslateResp, err error) {
	var _args TranslateServiceTranslateArgs
	_args.Req = req
	var _result TranslateServiceTranslateResult
	if err = p.Client_().Call(ctx, "Translate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type TranslateServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TranslateService
}

func (p *TranslateServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TranslateServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TranslateServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTranslateServiceProcessor(handler TranslateService) *TranslateServiceProcessor {
	self := &TranslateServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("DetectLanguage", &translateServiceProcessorDetectLanguage{handler: handler})
	self.AddToProcessorMap("Translate", &translateServiceProcessorTranslate{handler: handler})
	return self
}
func (p *TranslateServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type translateServiceProcessorDetectLanguage struct {
	handler TranslateService
}

func (p *translateServiceProcessorDetectLanguage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TranslateServiceDetectLanguageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DetectLanguage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TranslateServiceDetectLanguageResult{}
	var retval *DetectLanguageResp
	if retval, err2 = p.handler.DetectLanguage(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DetectLanguage: "+err2.Error())
		oprot.WriteMessageBegin("DetectLanguage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DetectLanguage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type translateServiceProcessorTranslate struct {
	handler TranslateService
}

func (p *translateServiceProcessorTranslate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TranslateServiceTranslateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Translate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TranslateServiceTranslateResult{}
	var retval *TranslateResp
	if retval, err2 = p.handler.Translate(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Translate: "+err2.Error())
		oprot.WriteMessageBegin("Translate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Translate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type TranslateServiceDetectLanguageArgs struct {
	Req *DetectLanguageReq `thrift:"req,1" frugal:"1,default,DetectLanguageReq" json:"req"`
}

func NewTranslateServiceDetectLanguageArgs() *TranslateServiceDetectLanguageArgs {
	return &TranslateServiceDetectLanguageArgs{}
}

func (p *TranslateServiceDetectLanguageArgs) InitDefault() {
	*p = TranslateServiceDetectLanguageArgs{}
}

var TranslateServiceDetectLanguageArgs_Req_DEFAULT *DetectLanguageReq

func (p *TranslateServiceDetectLanguageArgs) GetReq() (v *DetectLanguageReq) {
	if !p.IsSetReq() {
		return TranslateServiceDetectLanguageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TranslateServiceDetectLanguageArgs) SetReq(val *DetectLanguageReq) {
	p.Req = val
}

var fieldIDToName_TranslateServiceDetectLanguageArgs = map[int16]string{
	1: "req",
}

func (p *TranslateServiceDetectLanguageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TranslateServiceDetectLanguageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TranslateServiceDetectLanguageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TranslateServiceDetectLanguageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDetectLanguageReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TranslateServiceDetectLanguageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DetectLanguage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TranslateServiceDetectLanguageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TranslateServiceDetectLanguageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TranslateServiceDetectLanguageArgs(%+v)", *p)
}

func (p *TranslateServiceDetectLanguageArgs) DeepEqual(ano *TranslateServiceDetectLanguageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TranslateServiceDetectLanguageArgs) Field1DeepEqual(src *DetectLanguageReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TranslateServiceDetectLanguageResult struct {
	Success *DetectLanguageResp `thrift:"success,0,optional" frugal:"0,optional,DetectLanguageResp" json:"success,omitempty"`
}

func NewTranslateServiceDetectLanguageResult() *TranslateServiceDetectLanguageResult {
	return &TranslateServiceDetectLanguageResult{}
}

func (p *TranslateServiceDetectLanguageResult) InitDefault() {
	*p = TranslateServiceDetectLanguageResult{}
}

var TranslateServiceDetectLanguageResult_Success_DEFAULT *DetectLanguageResp

func (p *TranslateServiceDetectLanguageResult) GetSuccess() (v *DetectLanguageResp) {
	if !p.IsSetSuccess() {
		return TranslateServiceDetectLanguageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TranslateServiceDetectLanguageResult) SetSuccess(x interface{}) {
	p.Success = x.(*DetectLanguageResp)
}

var fieldIDToName_TranslateServiceDetectLanguageResult = map[int16]string{
	0: "success",
}

func (p *TranslateServiceDetectLanguageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TranslateServiceDetectLanguageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TranslateServiceDetectLanguageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TranslateServiceDetectLanguageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDetectLanguageResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TranslateServiceDetectLanguageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DetectLanguage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TranslateServiceDetectLanguageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TranslateServiceDetectLanguageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TranslateServiceDetectLanguageResult(%+v)", *p)
}

func (p *TranslateServiceDetectLanguageResult) DeepEqual(ano *TranslateServiceDetectLanguageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TranslateServiceDetectLanguageResult) Field0DeepEqual(src *DetectLanguageResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TranslateServiceTranslateArgs struct {
	Req *TranslateReq `thrift:"req,1" frugal:"1,default,TranslateReq" json:"req"`
}

func NewTranslateServiceTranslateArgs() *TranslateServiceTranslateArgs {
	return &TranslateServiceTranslateArgs{}
}

func (p *TranslateServiceTranslateArgs) InitDefault() {
	*p = TranslateServiceTranslateArgs{}
}

var TranslateServiceTranslateArgs_Req_DEFAULT *TranslateReq

func (p *TranslateServiceTranslateArgs) GetReq() (v *TranslateReq) {
	if !p.IsSetReq() {
		return TranslateServiceTranslateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TranslateServiceTranslateArgs) SetReq(val *TranslateReq) {
	p.Req = val
}

var fieldIDToName_TranslateServiceTranslateArgs = map[int16]string{
	1: "req",
}

func (p *TranslateServiceTranslateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TranslateServiceTranslateArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TranslateServiceTranslateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TranslateServiceTranslateArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewTranslateReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TranslateServiceTranslateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Translate_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TranslateServiceTranslateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TranslateServiceTranslateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TranslateServiceTranslateArgs(%+v)", *p)
}

func (p *TranslateServiceTranslateArgs) DeepEqual(ano *TranslateServiceTranslateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TranslateServiceTranslateArgs) Field1DeepEqual(src *TranslateReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TranslateServiceTranslateResult struct {
	Success *TranslateResp `thrift:"success,0,optional" frugal:"0,optional,TranslateResp" json:"success,omitempty"`
}

func NewTranslateServiceTranslateResult() *TranslateServiceTranslateResult {
	return &TranslateServiceTranslateResult{}
}

func (p *TranslateServiceTranslateResult) InitDefault() {
	*p = TranslateServiceTranslateResult{}
}

var TranslateServiceTranslateResult_Success_DEFAULT *TranslateResp

func (p *TranslateServiceTranslateResult) GetSuccess() (v *TranslateResp) {
	if !p.IsSetSuccess() {
		return TranslateServiceTranslateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TranslateServiceTranslateResult) SetSuccess(x interface{}) {
	p.Success = x.(*TranslateResp)
}

var fieldIDToName_TranslateServiceTranslateResult = map[int16]string{
	0: "success",
}

func (p *TranslateServiceTranslateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TranslateServiceTranslateResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TranslateServiceTranslateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TranslateServiceTranslateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewTranslateResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TranslateServiceTranslateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Translate_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TranslateServiceTranslateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TranslateServiceTranslateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TranslateServiceTranslateResult(%+v)", *p)
}

func (p *TranslateServiceTranslateResult) DeepEqual(ano *TranslateServiceTranslateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TranslateServiceTranslateResult) Field0DeepEqual(src *TranslateResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
