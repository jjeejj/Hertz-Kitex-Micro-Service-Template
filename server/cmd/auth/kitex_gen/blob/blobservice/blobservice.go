// Code generated by Kitex v0.4.4. DO NOT EDIT.

package blobservice

import (
	"context"
	blob "github.com/jjeejj/Hertz-Kitex-Micro-Service-Template/server/cmd/auth/kitex_gen/blob"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return blobServiceServiceInfo
}

var blobServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BlobService"
	handlerType := (*blob.BlobService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateBlob": kitex.NewMethodInfo(createBlobHandler, newBlobServiceCreateBlobArgs, newBlobServiceCreateBlobResult, false),
		"GetBlob":    kitex.NewMethodInfo(getBlobHandler, newBlobServiceGetBlobArgs, newBlobServiceGetBlobResult, false),
		"GetBlobURL": kitex.NewMethodInfo(getBlobURLHandler, newBlobServiceGetBlobURLArgs, newBlobServiceGetBlobURLResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "blob",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func createBlobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*blob.BlobServiceCreateBlobArgs)
	realResult := result.(*blob.BlobServiceCreateBlobResult)
	success, err := handler.(blob.BlobService).CreateBlob(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBlobServiceCreateBlobArgs() interface{} {
	return blob.NewBlobServiceCreateBlobArgs()
}

func newBlobServiceCreateBlobResult() interface{} {
	return blob.NewBlobServiceCreateBlobResult()
}

func getBlobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*blob.BlobServiceGetBlobArgs)
	realResult := result.(*blob.BlobServiceGetBlobResult)
	success, err := handler.(blob.BlobService).GetBlob(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBlobServiceGetBlobArgs() interface{} {
	return blob.NewBlobServiceGetBlobArgs()
}

func newBlobServiceGetBlobResult() interface{} {
	return blob.NewBlobServiceGetBlobResult()
}

func getBlobURLHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*blob.BlobServiceGetBlobURLArgs)
	realResult := result.(*blob.BlobServiceGetBlobURLResult)
	success, err := handler.(blob.BlobService).GetBlobURL(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBlobServiceGetBlobURLArgs() interface{} {
	return blob.NewBlobServiceGetBlobURLArgs()
}

func newBlobServiceGetBlobURLResult() interface{} {
	return blob.NewBlobServiceGetBlobURLResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateBlob(ctx context.Context, req *blob.CreateBlobRequest) (r *blob.CreateBlobResponse, err error) {
	var _args blob.BlobServiceCreateBlobArgs
	_args.Req = req
	var _result blob.BlobServiceCreateBlobResult
	if err = p.c.Call(ctx, "CreateBlob", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBlob(ctx context.Context, req *blob.GetBlobRequest) (r *blob.GetBlobResponse, err error) {
	var _args blob.BlobServiceGetBlobArgs
	_args.Req = req
	var _result blob.BlobServiceGetBlobResult
	if err = p.c.Call(ctx, "GetBlob", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBlobURL(ctx context.Context, req *blob.GetBlobURLRequest) (r *blob.GetBlobURLResponse, err error) {
	var _args blob.BlobServiceGetBlobURLArgs
	_args.Req = req
	var _result blob.BlobServiceGetBlobURLResult
	if err = p.c.Call(ctx, "GetBlobURL", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
