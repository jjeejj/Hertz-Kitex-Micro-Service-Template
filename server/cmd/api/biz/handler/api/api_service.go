// Code generated by hertz generator.

package api

import (
	"context"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/golang-jwt/jwt"
	"github.com/jjeejj/Hertz-Kitex-Micro-Service-Template/kitex_gen/auth"
	"github.com/jjeejj/Hertz-Kitex-Micro-Service-Template/pkg/consts"
	"github.com/jjeejj/Hertz-Kitex-Micro-Service-Template/pkg/middleware"
	"github.com/jjeejj/Hertz-Kitex-Micro-Service-Template/server/cmd/api/biz/errno"
	"github.com/jjeejj/Hertz-Kitex-Micro-Service-Template/server/cmd/api/biz/model/server/cmd/api"
	"github.com/jjeejj/Hertz-Kitex-Micro-Service-Template/server/cmd/api/global"
	models "github.com/jjeejj/Hertz-Kitex-Micro-Service-Template/server/cmd/api/model"
)

// Login .
// @router /auth/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		errno.SendResponse(c, errno.BindAndValidateFail, nil)
		return
	}
	// rpc to get accountID
	resp, err := global.AuthClient.Login(ctx, &auth.LoginRequest{Code: req.Code})
	if err != nil {
		errno.SendResponse(c, errno.RequestServerFail, nil)
		return
	}
	// create a JWT
	j := middleware.NewJWT()
	claims := models.CustomClaims{
		ID: resp.AccountId,
		StandardClaims: jwt.StandardClaims{
			NotBefore: time.Now().Unix(),
			ExpiresAt: time.Now().Unix() + consts.ThirtyDays,
			Issuer:    consts.JWTIssuer,
		},
	}
	token, err := j.CreateToken(claims)
	if err != nil {
		errno.SendResponse(c, errno.GenerateTokenFail, nil)
		return
	}
	// return token
	errno.SendResponse(c, errno.Success, api.LoginResponse{
		Token:     token,
		ExpiredAt: time.Now().Unix() + consts.ThirtyDays,
	})
}

// GetUserInfo .
// @router /auth/info [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	aid, flag := c.Get(consts.AccountID)
	if !flag {
		errno.SendResponse(c, errno.ParamErr, nil)
		return
	}

	resp, err := global.AuthClient.GetUser(ctx, &auth.GetUserRequest{AccontId: aid.(int64)})
	if err != nil {
		errno.SendResponse(c, errno.RequestServerFail, nil)
		return
	}
	errno.SendResponse(c, errno.Success, api.UserInfo{
		AccountId:   resp.AccountId,
		Username:    resp.Username,
		AvatarUrl:   resp.AvatarUrl,
		PhoneNumber: resp.PhoneNumber,
	})
}

// UpdateUserInfo .
// @router /auth/info [POST]
func UpdateUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UpdateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		errno.SendResponse(c, errno.BindAndValidateFail, nil)
		return
	}
	aid, flag := c.Get(consts.AccountID)
	if !flag {
		errno.SendResponse(c, errno.ParamErr, nil)
		return
	}

	_, err = global.AuthClient.UpdateUser(ctx, &auth.UpdateUserRequest{
		AccountId:   aid.(int64),
		Username:    req.Username,
		PhoneNumber: req.PhoneNumber,
	})
	if err != nil {
		errno.SendResponse(c, errno.RequestServerFail, nil)
		return
	}
	errno.SendResponse(c, errno.Success, api.UpdateUserResponse{})
}

// UploadAvatar .
// @router /auth/avatar [POST]
func UploadAvatar(ctx context.Context, c *app.RequestContext) {
	var err error
	aid, flag := c.Get(consts.AccountID)
	if !flag {
		errno.SendResponse(c, errno.ParamErr, nil)
		return
	}

	resp, err := global.AuthClient.UploadAvatar(ctx, &auth.UploadAvatarRequset{AccountId: aid.(int64)})
	if err != nil {
		errno.SendResponse(c, errno.RequestServerFail, nil)
		return
	}
	errno.SendResponse(c, errno.Success, api.UploadAvatarResponse{UploadUrl: resp.UploadUrl})
}

// CreateCar .
// @router /car [POST]
func CreateCar(ctx context.Context, c *app.RequestContext) {
}

// GetCar .
// @router /car [GET]
func GetCar(ctx context.Context, c *app.RequestContext) {
}

// GetCars .
// @router /cars [GET]
func GetCars(ctx context.Context, c *app.RequestContext) {
}

// GetProfile .
// @router /profile [GET]
func GetProfile(ctx context.Context, c *app.RequestContext) {
}

// SubmitProfile .
// @router /profile [POST]
func SubmitProfile(ctx context.Context, c *app.RequestContext) {
}

// ClearProfile .
// @router /profile [DELETE]
func ClearProfile(ctx context.Context, c *app.RequestContext) {
}

// GetProfilePhoto .
// @router /profile/photo [GET]
func GetProfilePhoto(ctx context.Context, c *app.RequestContext) {
}

// CreateProfilePhoto .
// @router /profile/photo [POST]
func CreateProfilePhoto(ctx context.Context, c *app.RequestContext) {
}

// CompleteProfilePhoto .
// @router /profile/photo/complete [POST]
func CompleteProfilePhoto(ctx context.Context, c *app.RequestContext) {
}

// ClearProfilePhoto .
// @router /profile/photo [DELETE]
func ClearProfilePhoto(ctx context.Context, c *app.RequestContext) {
}

// CreateTrip .
// @router /trip [POST]
func CreateTrip(ctx context.Context, c *app.RequestContext) {
}

// GetTrip .
// @router /trip/:id [GET]
func GetTrip(ctx context.Context, c *app.RequestContext) {
}

// GetTrips .
// @router /trips [GET]
func GetTrips(ctx context.Context, c *app.RequestContext) {
}

// UpdateTrip .
// @router /trip/:id [PUT]
func UpdateTrip(ctx context.Context, c *app.RequestContext) {
}
